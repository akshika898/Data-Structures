o(n2) 
public static void getPairsCount(int[] arr, int sum) 
    { 
        int count = 0;
        for (int i = 0; i < arr.length; i++) 
            for (int j = i + 1; j < arr.length; j++) 
                if ((arr[i] + arr[j]) == sum) 
                    count++; 
        System.out.printf(count); 
    } 
} 

o(n) -better using hash

static int getPairsCount(int n, int sum) 
    { 
        HashMap<Integer, Integer> hm = new HashMap<>(); 
        for (int i=0; i<n; i++){      
        if(hm.containsKey(arr[i]))                   
     	hm.put(arr[i], hm.get(arr[i])+1); 
        else
	hm.put(arr[i],0); 
        } 
        int twice_count = 0; 
  
       for (int i=0; i<n; i++) 
        { 
            if(hm.get(sum-arr[i]) != null) 
                twice_count += hm.get(sum-arr[i]); 
  
            // if (arr[i], arr[i]) pair satisfies the condition, 
            // then we need to ensure that the count is 
            // decreased by one such that the (arr[i], arr[i]) 
            // pair is not considered 
            if (sum-arr[i] == arr[i]) 
                twice_count--; 
        } 
        return twice_count/2; 
    } 
  