s1="ab"  s2="ergbaj"   true
because permutation of ab i.e. ba is present 
in s2

public boolean checkInclusion(String s1, String s2) {
        s1 = sort(s1);
        for (int i = 0; i <= s2.length() - s1.length(); i++) {
            if (s1.equals(sort(s2.substring(i, i + s1.length()))))
                return true;
        }
        return false;
    }
    pub lic String sort(String s) {
        char[] t = s.toCharArray();
        Arrays.sort(t);
        return new String(t);
    }
}


optimised 

    public boolean checkInclusion(String s1, String s2) {
        if (s1.length() > s2.length() || s2.length() == 0) return false;
        if (s1.length() == 0) return true;
        
        int x = s1.length(), y = s2.length();
        int[] array1 = new int[26];
        int[] array2 = new int[26];
        
        for (int i = 0; i < x; i++) {
            array1[s1.charAt(i) - 'a']++;
            array2[s2.charAt(i) - 'a']++;
        }
        
        for (int i = x; i < y; i++) {
            if (Arrays.equals(array1, array2)) {
                return true;
            }
            array2[s2.charAt(i-x) - 'a']--;
            array2[s2.charAt(i) - 'a']++;
        }
        if (Arrays.equals(array1, array2)) return true;
        else return false;
    }
}