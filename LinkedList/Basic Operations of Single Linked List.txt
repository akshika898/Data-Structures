#include <stdio.h>

struct Node{
    int data;
    struct Node* next;
};

struct Node* head=NULL;

/*-------------- New Element --------------*/

struct Node* newElement(int data)
{
    struct Node* new_node=(struct Node*)malloc(sizeof(struct Node));
    new_node->data=data;
    new_node->next=NULL;
    return new_node;
}

/*-------------- Print --------------*/

void print()
{
    struct Node* ptr=head;
    while(ptr)
    {
        printf("%d ",ptr->data);
        ptr=ptr->next;
    }
}

/*-------------- Insert at Start --------------*/

void insertAtStart(int data)
{
    struct Node* new_node=newElement(data);
    new_node->next=head;
    head=new_node;
}

/*-------------- Insert at End --------------*/

void insertAtEnd(int data)
{
    struct Node* new_node=newElement(data);
    if(head==NULL)
    {
        head=new_node;
    }
    else
    {
        struct Node* ptr=head;
        while(ptr->next)
        {
            ptr=ptr->next;
        }
        ptr->next=new_node;
    }
}

/*-------------- Insert After --------------*/

void insertAfter(int data,int pos)
{
    struct Node* new_node=newElement(data);
    if(head==NULL)
    {
        head=new_node;
    }
    else
    {
        struct Node* ptr=head;
        while(pos>1)
        {
            ptr=ptr->next;
            pos--;
        }
        new_node->next=ptr->next;
        ptr->next=new_node;
    }
}

/*-------------- Delete --------------*/

void delete(int pos)
{
    struct Node* ptr=head;
    while(pos>2)
    {
        ptr=ptr->next;
        pos--;
    }
    ptr->next=ptr->next->next;
}

/*-------------- Reverse --------------*/

void reverse()
{
    struct Node* n=NULL;
    struct Node* prev=NULL;
    struct Node* current=head;
    
    while(current)
    {
        n=current->next;
        current->next=prev;
        prev=current;
        current=n;
    }
    head=prev;
}

int main()
{
    insertAtStart(10);
    insertAtStart(20);
    insertAtStart(30);
    
    insertAtEnd(40);
    insertAtEnd(50);
    insertAtEnd(60);
    
    insertAfter(70,3);
    insertAfter(80,4);
    insertAfter(90,5);
    
    delete(4);
    
    reverse();
    
    print();
    
    return 0;
}
