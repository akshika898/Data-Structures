static void merge(Node root1, Node root2)
{
    if (root1 == null && root2 == null)
        return;
 
    if (root1 == null) 
    {
        inorder(root2);
        return;
    }
    if (root2 == null)
    {
        inorder(root1);
        return;
    }

    Node temp1 = root1;
    Node prev1 = null;

    while (temp1.left != null)
    {
        prev1 = temp1;
        temp1 = temp1.left;
    }

    Node temp2 = root2;
    Node prev2 = null;
 
    while (temp2.left != null)
    {
        prev2 = temp2;
        temp2 = temp2.left;
    }
 
    if (temp1.data <= temp2.data)
    {
        System.out.print(temp1.data + " ");
 
        // If the node has no parent, means this node is the root
        if (prev1 == null)
        {
            // Simply make the right child of the root as new root
            merge(root1.right, root2);
        }
        else
        {
             
            // As this node is the leftmost node, it is certain that it will not have a left child so we simply assign this
            // node's right pointer, which can be either null or not, to its parent's left pointer. 
            // This statement is just doing the task of deleting the node
            prev1.left = temp1.right;
            merge(root1, root2);
        }
    }
    else
    {
        System.out.print(temp2.data + " ");
        if (prev2 == null)
            merge(root1, root2.right);

        else
        {
            prev2.left = temp2.right;
            merge(root1, root2);
        }
    }
}