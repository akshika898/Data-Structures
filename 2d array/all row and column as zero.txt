t : m*n
space: m+n
public void setZeroes(int[][] matrix) {
    int R = matrix.length;
    int C = matrix[0].length;
    Set<Integer> rows = new HashSet<Integer>();
    Set<Integer> cols = new HashSet<Integer>();

    // Essentially, we mark the rows and columns that are to be made zero
    for (int i = 0; i < R; i++) {
      for (int j = 0; j < C; j++) {
        if (matrix[i][j] == 0) {
          rows.add(i);
          cols.add(j);
        }
      }
    }

    // Iterate over the array once again and using the rows and cols sets, update the elements.
    for (int i = 0; i < R; i++) {
      for (int j = 0; j < C; j++) {
        if (rows.contains(i) || cols.contains(j)) {
          matrix[i][j] = 0;
        }
      }
    }
  }
}



method 2: without extra space
void makeAllZero(int a[ROWS][COLS], int r, int c)
{
    int isCol = 0;
    for (int i = 0; i < r; i++) {
      if (a[i][0] == 0) {
        isCol = 1;
      }

      for (int j = 1; j < c; j++) {
        if (a[i][j] == 0) {
          a[0][j] = 0;
          a[i][0] = 0;
        }
      }
    }

    for (int i = 1; i < r; i++) {
      for (int j = 1; j < c; j++) {
        if (a[i][0] == 0 || a[0][j] == 0) {
          a[i][j] = 0;
        }
      }
    }

    if (a[0][0] == 0) {
      for (int j = 0; j < c; j++) {
        a[0][j] = 0;
      }
    }

    if (isCol==1) {
      for (int i = 0; i < r; i++) {
        a[i][0] = 0;
      }
    }
  }
