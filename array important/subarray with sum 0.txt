 public int SubArray(int[] nums) {
    int current=0;
    for(int i=0;i<nums.length;i++){   
          curent=0;
    for(int j=i;j<nums.length;j++){      
       current+=nums[i];  
        if(current==0)
            return true;
    }
    return false;
    }


0(n)

 static Boolean subArrayExists(int arr[]) 
    { 
        Set<Integer> hs = new HashSet<Integer>();  
        int sum = 0;           
        for (int i = 0; i < arr.length; i++) 
        {  
            sum += arr[i]; 
            if (arr[i] == 0 || sum == 0 || hs.contains(sum))                          
                return true; 
              
            hs.add(sum); 
        }  
        return false; 
    }  


or

import java.util.*;
class Result
{
  static void largSubArray(int arr[], int n)
  {
    HashMap<Integer, Integer> hm = new HashMap<Integer, Integer>(); 
  
        int sum = 0;
        int max_len = -1;  
        for (int i = 0; i < n; i++) {  
            sum += arr[i]; 
            if (arr[i] == 0 && max_len == -1) 
                max_len = 1; 
  
            if (sum == 0) 
                max_len = i + 1; 
            Integer prev_i = hm.get(sum); 
            if (prev_i != null) 
                max_len = Math.max(max_len, i - prev_i); 
            else 
                hm.put(sum, i); 
        } 
        System.out.println(max_len);
  }
}