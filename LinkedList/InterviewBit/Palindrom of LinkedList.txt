/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 * 
 * typedef struct ListNode listnode;
 * 
 * listnode* listnode_new(int val) {
 *     listnode* node = (listnode *) malloc(sizeof(listnode));
 *     node->val = val;
 *     node->next = NULL;
 *     return node;
 * }
 */
/**
 * @input A : Head pointer of linked list 
 * 
 * @Output Integer
 */


Approach 1:- (InterviewBit Solution)

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 * 
 * typedef struct ListNode listnode;
 * 
 * listnode* listnode_new(int val) {
 *     listnode* node = (listnode *) malloc(sizeof(listnode));
 *     node->val = val;
 *     node->next = NULL;
 *     return node;
 * }
 */
/**
 * @input A : Head pointer of linked list 
 * 
 * @Output Integer
 */
int reverse(listnode **left,listnode *right){
    if(right==NULL)
        return 1;
    int i=reverse(left,right->next);
    
    if(i==0)
        return 0;
    
    int p = (right->val==(*left)->val);
    (*left)=(*left)->next;
    
    return p;
    
}
int lPalin(listnode* A) {
    
    return reverse(&A,A);
    
}

Approach 2:-
/*int lPalin(listnode* A) {
    int res=1;
    listnode* B=NULL;
    listnode* start2=B;
    listnode* start=A;
    
    while(start){
        listnode* newNode=listnode_new(start->val);
        newNode->next=start2;
        start2=newNode;
        start=start->next;
    }
    
    start=A;
    
    while(start2){
        if(start2->val != start->val){
            res=0;
            break;
        }
        
        start=start->next;
        start2=start2->next;
    }
    
    return res;
}
*/