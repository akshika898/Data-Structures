Given a Binary tree and a sum S, print all the paths, starting from root, that sums upto the given sum.
Note that this problem is different from root to leaf paths. Here path doesnâ€™t need to end on a leaf node.

Input : sum = 8, 
     
         1
       /   \
     20      3
           /    \
         4       15    
        /  \     /  \
       6    7   8    9           
Output : 1 3 4


static void printPathsUtil(Node node, int sum,  int sum_so_far,  ArrayList<Integer> path) 
{ 
    if (curr_node == null) 
        return; 
 
    sum_so_far += node.data; 
    path.add(node.data); 
  
    if (sum_so_far == sum)  
    { 
        for(int i = 0; i < path.size(); i++) 
            System.out.print(path.get(i) + " "); 
              
        System.out.println(); 
    } 
  
    if (curr_node.left != null) 
        printPathsUtil(curr_node.left, sum, sum_so_far, path); 

    if (curr_node.right != null) 
        printPathsUtil(curr_node.right, sum, sum_so_far, path); 
  
    path.remove(path.size() - 1); 
} 