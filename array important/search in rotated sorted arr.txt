[0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2].
we can normally search but we need to do 
in log n and make use of sorted order.so we 
use binary search
(modified)


Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1

class Solution {
    public int search(int[] nums, int target) {
        if(nums.length==0)
            return -1;
        int l=0;
        int r=nums.length-1;

//find starting point of sorted arr i.e min element
        while(l<r)
        {
            int mid=l+(r-l)/2;
            if(nums[mid]>nums[r])
                l=mid+1;
            else
                r=mid;
        }
        int start=l;
         l=0;
//find in which half target exists
        r=nums.length-1;
        if(target>=nums[start] && target<=nums[r])
            l=start;
        else
            r=start;
        
//normal binay search
        while(l<=r)
        {
            int mid=l+(r-l)/2;
            if(nums[mid]==target)
                return mid;
            else if (nums[mid]>target)
                r=mid-1;
            else
                l=mid+1;
        }
        return -1;
    }
}