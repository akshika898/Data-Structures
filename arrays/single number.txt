Given a non-empty array of integers nums, every element appears twice except for one. Find that single one
Input: nums = [2,2,1]
Output: 1

Input: nums = [4,1,2,1,2]
Output: 4

1)  o(n2)

2) o(nlogn)

    public int singleNumber(int[] nums) {
        Arrays.sort(nums);
        for(int i=0;i<nums.length-1;)
        {
            if(nums[i]==nums[i+1] )
                i=i+2;
            else
                return nums[i];
        }
        return nums[nums.length-1];
    }


3) o(n2):n to iterate and n to search hashset

public int singleNumber(int[] nums) {
        HashSet<Integer> hs=new HashSet<>();
        for(int i=0;i<nums.length;i++)
        {
            if(!hs.contains(nums[i]))
                hs.add(nums[i]);
            else
                hs.remove(nums[i]);
        }
        Iterator<Integer> it = hs.iterator();
        return it.next();
    }

4) 0(n)

    public int singleNumber(int[] nums) {
    HashMap<Integer, Integer> hash = new HashMap<>();

    for (int i : nums) {
      hash.put(i, hash.get(i)==null ? 1:hash.get(i)+ 1);
    }
    for (int i : nums) {
      if (hash.get(i) == 1) 
        return i;
    }
    return 0;
  }