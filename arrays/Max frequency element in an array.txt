method 1:o(n2)

Run two loops. Outer loop picks all elements 1-1. Inner
loop finds freq of the picked element and compares with
the max so far.

METHOD 2:

public static void main (String[] args) {
	for(int i=0;i<n;i++)
	a[i]=sc.nextInt();
	Arrays.sort(a);
	int max=1,curr=1,res=a[0];
	for(int i=1;i<n;i++)
	{
	    if(a[i]==a[i-1])
	    curr++;
	    else{
	        if(curr>max)
	        {
	            max=curr;
	            res=a[i-1];
	        }
	            curr=1;
	    }
	}
	System.out.println(res);
}

method 3: extra space 
k--array elements are in range of k-1
int maxRepeating(int* arr, int n, int k) 
{ 
    for (int i = 0; i< n; i++) 
        arr[arr[i]%k] += k; 
  
    int max = arr[0], result = 0; 
    for (int i = 1; i < n; i++) 
    { 
        if (arr[i] > max) 
        { 
            max = arr[i]; 
            result = i; 
        } 
    } 
  
    /* Uncomment this code to get the original array back 
       for (int i = 0; i< n; i++) 
          arr[i] = arr[i]%k; */

    return result; 
} 

