 void segregateEvenOdd() 
    { 
        Node end = head , prev = null , curr = head; 

        while (end.next != null) 
            end = end.next; 
  
        Node new_end = end; 
  
        // Consider all odd nodes before getting first eve node 
        while (curr.data %2 !=0 && curr != end) 
        { 
            new_end.next = curr;  
            new_end.next.next = null; 
            new_end = new_end.next; 
            curr=curr.next;
        } 

        if (curr.data %2 ==0) 
        { 
            head = curr; 
            while (curr != end) 
            { 
                if (curr.data % 2 == 0) 
                { 
                    prev = curr; 
                    curr = curr.next; 
                } 
                else
                { 
                    prev.next = curr.next; 
                    curr.next = null; 
                    new_end.next = curr; 
                    new_end = curr; 
                    curr = prev.next; 
                } 
            } 
        } 
  
        /* We have to set prev before executing rest of this code */
        else prev = curr; 
  
        if (new_end != end && end.data %2 != 0) 
        { 
            prev.next = end.next; 
            end.next = null; 
            new_end.next = end; 
        } 
    } 
  