//0(2^n) slowest approach

    public int fib(int N) {
        if (N <= 1) {
            return N;
        }
        return fib(N-1) + fib(N-2);
    }

//o(n)

    public int fib(int N) {
      int[] a= new int[N + 1];
     a[0]=0;
     if(N!=0)
      a[1] = 1;
      for (int i = 2; i <= N; i++) 
          a[i] = a[i-1] + a[i-2];
      
      return a[N];
    }
}

or 

    public int fib(int n) {
        if(n<=1) 
            return n;
        int temp1 = 0, temp2 = 1,res;
        for(int i=2;i<=n;i++){
            res = temp1 + temp2;
            temp1 = temp2;
            temp2 = res;
        }
        return res;
    }   